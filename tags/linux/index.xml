<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on (bit-mage)</title><link>https://rajp152k.github.io/tags/linux/</link><description>Recent content in Linux on (bit-mage)</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 24 Mar 2025 15:18:39 +0530</lastBuildDate><atom:link href="https://rajp152k.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Blub in the Unix Philosophy</title><link>https://rajp152k.github.io/post/unixier-unix/</link><pubDate>Mon, 24 Mar 2025 15:18:39 +0530</pubDate><guid>https://rajp152k.github.io/post/unixier-unix/</guid><description>&lt;p&gt;I&amp;rsquo;ve always maintained a philosophical appetite for the tooling that I use.&lt;/p&gt;
&lt;p&gt;One of the core tenets of the Unix Philosophy&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt; is that everything is a file&amp;hellip;&lt;/p&gt;
&lt;p&gt;Plan9&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt; has caught my eye due to its more homogenous design than the usual unix you&amp;rsquo;re used to.&lt;/p&gt;
&lt;p&gt;The footnoted-paper (~pre-mature book) is somewhat unhinged and doesn&amp;rsquo;t shy away from taking a jab at the Unix ecosystem and design.&lt;/p&gt;
&lt;p&gt;Apart from the several points the author makes, what stands out the most for me is the idea of &lt;em&gt;everything&lt;/em&gt; truly being a file: in hindsight, Unix only realizes a fraction of the principle.&lt;/p&gt;</description></item><item><title>Bells &amp; Whistles</title><link>https://rajp152k.github.io/post/bells-and-whistles/</link><pubDate>Sun, 23 Mar 2025 14:18:07 +0530</pubDate><guid>https://rajp152k.github.io/post/bells-and-whistles/</guid><description>&lt;p&gt;I&amp;rsquo;ve started spending some time per day without the usual modern software engineering tooling (LLMs, the Internet, etc) to explicitly maintain my cyber-deduction skills (in the context of Unix-based systems (BSDs, Linux, yet to explore Plan9), mostly because they power the majority of the global compute infrastructure).&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s fun: init your journey with a &lt;code&gt;man man&lt;/code&gt; (I&amp;rsquo;m an &lt;code&gt;info info&lt;/code&gt; guy myself) and be extremely skeptical of your usual modus operandi, ditching all assumptions and tumbling down the rabbit hole.&lt;/p&gt;</description></item><item><title>A CLI Timer to save your soul</title><link>https://rajp152k.github.io/post/cli-alarms/</link><pubDate>Thu, 26 Sep 2024 11:26:45 +0530</pubDate><guid>https://rajp152k.github.io/post/cli-alarms/</guid><description>&lt;p&gt;This is how I time my workblocks these days&amp;hellip;&lt;/p&gt;
&lt;h3 id="prerequisites"&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ALSA : &lt;a href="https://wiki.archlinux.org/title/Advanced_Linux_Sound_Architecture"&gt;https://wiki.archlinux.org/title/Advanced_Linux_Sound_Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="functions"&gt;Functions&lt;/h3&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;single_beep() {
( \speaker-test --frequency $1 --test sine )&amp;amp;
pid=$!
\sleep 0.${2}s
\kill -9 $pid
}

morse(){
for i in {1..3};
do
 single_beep 400 $1
 \sleep 0.${2}s
done
}

sos() {
 morse 200 500
 morse 400 500
 morse 200 500
}

timer() {
 \sleep $1 &amp;amp;&amp;amp; sos &amp;amp;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="usage"&gt;Usage&lt;/h3&gt;
&lt;p&gt;The above can be sourced in your shell rc.&lt;br&gt;
I store it in a &lt;code&gt;.bash_funcs&lt;/code&gt; where I have all my functions and source them in the end of my rc as &lt;code&gt;source ~/.bash_funcs&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>I'm in the Business of Ideation</title><link>https://rajp152k.github.io/post/gaming-youtube/</link><pubDate>Tue, 17 Sep 2024 09:01:23 +0530</pubDate><guid>https://rajp152k.github.io/post/gaming-youtube/</guid><description>&lt;p&gt;People have been responding to emacs and my beard.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://ik.imagekit.io/rajp152k/rpdev/youtube/screenshot_2024-09-17T09:06:11.png?updatedAt=1726544204857" alt="comments"&gt;&lt;/p&gt;
&lt;p&gt;For a while I thought I did not have a lot to say. Turns out a lot of other humans are quite interested in the much of the same things that I&amp;rsquo;m into: my hatred for the mouse, and the consequent love for efficient workflows being some of them.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll give the people what they want: I get to enjoy esoteric tech and spread the word, growing a cult, while other humans have enlightened experiences (believe me I do talk like this in person) and continue propogating the techno-propaganda about enjoying computer science.&lt;/p&gt;</description></item><item><title>Thinkpad X13 Gen 4 AMD Ryzen Pro 7840U &amp; Workflow Review</title><link>https://rajp152k.github.io/post/new-laptop/</link><pubDate>Thu, 06 Jun 2024 17:17:59 +0530</pubDate><guid>https://rajp152k.github.io/post/new-laptop/</guid><description>&lt;p&gt;I recently shifted my operations to a thinkpad x13g4amd (Ryzen 7840U + 780M Radeon) and am using this transfer as an opportunity to realize and improve my work related habits.&lt;/p&gt;
&lt;h2 id="gnulinux"&gt;GNU/Linux&lt;/h2&gt;
&lt;p&gt;All of my pipelines are based around Linux and the core GNU utils. I had to use windows for a while due to org-wide constraints but I&amp;rsquo;ve recently been given the signal to shift to linux.&lt;/p&gt;
&lt;p&gt;I rarely used any windows native tools for my workflows and there was always a layer of linux emulation/virtualization (wsl, scoop, and the likes) upon which I conducted my usual operations. Given I use Debian at home, a non native linux experience was frustrating at best and depressing at worst. No more, do I have to confine myself.&lt;/p&gt;</description></item></channel></rss>