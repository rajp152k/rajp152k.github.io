<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Infix on Raj Patil</title><link>https://rajp152k.github.io/tags/infix/</link><description>Recent content in Infix on Raj Patil</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 29 Aug 2023 11:09:43 +0530</lastBuildDate><atom:link href="https://rajp152k.github.io/tags/infix/index.xml" rel="self" type="application/rss+xml"/><item><title>Common Lisp : The Series - 0.1 : Representing Programs</title><link>https://rajp152k.github.io/post/clts/clts-0.1/</link><pubDate>Tue, 29 Aug 2023 11:09:43 +0530</pubDate><guid>https://rajp152k.github.io/post/clts/clts-0.1/</guid><description>What makes lisp so unique is the way its code is structured - you definitely can&amp;rsquo;t miss all those parentheses. In this section of the series, I discuss the cause for such a representation and how that makes lisp unique in terms of how it views its code as data as code (aka homo-iconicity).
Further reading Python disassembler Homoiconity Byte Code S-expressions Common Operator Notation Abstract Syntax Tree The Blub Paradox Call to collaborate If you&amp;rsquo;re someone who shares the dream of making lisp popular and mainstream so that we can use it for our jobs and don&amp;rsquo;t have to switch to blubs to make a living (without denting its charm of course) , consider contributing to the notes and hit me up via mail or any of the other media I&amp;rsquo;m present on.</description></item></channel></rss>